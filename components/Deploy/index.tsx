"use client";

// Imports
// ========================================================
import { useAccount, useWaitForTransactionReceipt } from "wagmi";
import { useState } from "react";
import { encodeAbiParameters } from "viem";
import { berachainTestnet } from "wagmi/chains";

// Constants
// ========================================================
/**
 * @dev All inputs and outputs of Contract
 */
const CONTRACT_ABI = [
  {
    "inputs": [
      {

        "internalType": "string",
        "name": "_greeting",
        "type": "string"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "address",
        "name": "sender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "message",
        "type": "string"
      }
    ],
    "name": "NewGreeting",
    "type": "event"
  },
  {
    "inputs": [],
    "name": "getGreeting",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_greeting",
        "type": "string"
      }
    ],
    "name": "setGreeting",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

/**
 * @dev full contract bytecode for deployment
 */
const CONTRACT_BYTECODE = '0x608060405234801561001057600080fd5b506040518060400160405280600e81526020016d0a0ded8c2e484cac2e4a6e8c2e6d60931b8152506040518060400160405280600481526020016310d3d31160e21b8152508160039081610064919061021a565b506004610071828261021a565b505060016005555061008d3369d3c21bcecceda1000000610092565b610300565b6001600160a01b0382166100ec5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546100fe91906102d9565b90915550506001600160a01b0382166000908152602081905260408120805483929061012b9084906102d9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806101a457607f821691505b6020821081036101c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610175576000816000526020600020601f850160051c810160208610156101f35750805b601f850160051c820191505b81811015610212578281556001016101ff565b505050505050565b81516001600160401b038111156102335761023361017a565b610247816102418454610190565b846101ca565b602080601f83116001811461027c57600084156102645750858301515b600019600386901b1c1916600185901b178555610212565b600085815260208120601f198616915b828110156102ab5788860151825594840194600190910190840161028c565b50858210156102c95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156102fa57634e487b7160e01b600052601160045260246000fd5b92915050565b610c908061030f6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80635dbdda69116100a2578063a457c2d711610071578063a457c2d7146101f5578063a9059cbb14610208578063cab34c081461021b578063dd62ed3e1461022a578063fccc28131461023d57600080fd5b80635dbdda69146101b357806370a08231146101bc57806395d89b41146101e55780639649b910146101ed57600080fd5b80632ff2e9dc116100de5780632ff2e9dc14610176578063313ce5671461018757806339509351146101965780635ade228a146101a957600080fd5b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015157806323b872dd14610163575b600080fd5b610118610270565b6040516101259190610a8c565b60405180910390f35b61014161013c366004610af7565b610302565b6040519015158152602001610125565b6002545b604051908152602001610125565b610141610171366004610b21565b61031c565b61015569d3c21bcecceda100000081565b60405160128152602001610125565b6101416101a4366004610af7565b610340565b61015562093a8081565b61015561070881565b6101556101ca366004610b5d565b6001600160a01b031660009081526020819052604090205490565b610118610362565b610155600181565b610141610203366004610af7565b610371565b610141610216366004610af7565b6103f1565b610155678ac7230489e8000081565b610155610238366004610b78565b6103ff565b61025873deadbeefdeadbeefdeadbeefdeadbeefdeadbeef81565b6040516001600160a01b039091168152602001610125565b60606003805461027f90610bab565b80601f01602080910402602001604051908101604052809291908181526020018280546102ab90610bab565b80156102f85780601f106102cd576101008083540402835291602001916102f8565b820191906000526020600020905b8154815290600101906020018083116102db57829003601f168201915b5050505050905090565b60003361031081858561042a565b60019150505b92915050565b60003361032a85828561054e565b6103358585856105c8565b506001949350505050565b60003361031081858561035383836103ff565b61035d9190610bfb565b61042a565b60606004805461027f90610bab565b6000338161037f82866103ff565b9050838110156103e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610335828686840361042a565b6000336103108185856105c8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661048c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103db565b6001600160a01b0382166104ed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103db565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061055a84846103ff565b905060001981146105c257818110156105b55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103db565b6105c2848484840361042a565b50505050565b600060646105d7600184610c0e565b6105e19190610c25565b90506105f784846105f28486610c47565b6106e3565b6106168473deadbeefdeadbeefdeadbeefdeadbeefdeadbeef836106e3565b6001600160a01b0384166000908152600760205260408120549003610651576001600160a01b03841660009081526007602052604090204290555b6001600160a01b038316600090815260076020526040812054900361068c576001600160a01b03831660009081526007602052604090204290555b610695846108b1565b61069e836108b1565b6001600160a01b03808516600090815260066020526040808220429081905592861682529020556106d0600885610942565b506106dc600884610942565b5050505050565b6001600160a01b0383166107475760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103db565b6001600160a01b0382166107a95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103db565b6001600160a01b038316600090815260208190526040902054818110156108215760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103db565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610858908490610bfb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108a491815260200190565b60405180910390a36105c2565b6001600160a01b038116600090815260066020526040902054610708906108d89042610c47565b1015801561090c57506001600160a01b03811660009081526007602052604090205462093a80906109099042610c47565b11155b1561093f5761092381678ac7230489e8000061095e565b6001600160a01b03811660009081526006602052604090204290555b50565b6000610957836001600160a01b038416610a3d565b9392505050565b6001600160a01b0382166109b45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103db565b80600260008282546109c69190610bfb565b90915550506001600160a01b038216600090815260208190526040812080548392906109f3908490610bfb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000818152600183016020526040812054610a8457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610316565b506000610316565b60006020808352835180602085015260005b81811015610aba57858101830151858201604001528201610a9e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610af257600080fd5b919050565b60008060408385031215610b0a57600080fd5b610b1383610adb565b946020939093013593505050565b600080600060608486031215610b3657600080fd5b610b3f84610adb565b9250610b4d60208501610adb565b9150604084013590509250925092565b600060208284031215610b6f57600080fd5b61095782610adb565b60008060408385031215610b8b57600080fd5b610b9483610adb565b9150610ba260208401610adb565b90509250929050565b600181811c90821680610bbf57607f821691505b602082108103610bdf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561031657610316610be5565b808202811582820484141761031657610316610be5565b600082610c4257634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561031657610316610be556fea2646970667358221220d98c65e92890700da3e6d8d324e0fc1f34b280e499221c855f26360a9a019d3a64736f6c63430008190033';

/**
 * @dev Berachain testnet block explorer
 */
const BLOCK_EXPLORER = 'https://artio.beratrail.io/';

// Main Page
// ========================================================
export default function Deploy() {
  const { address, isConnected, connector } = useAccount();
  const [transactionHash, setTransactionHash] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const receipt = useWaitForTransactionReceipt({
    chainId: berachainTestnet.id,
    hash: transactionHash ? `${transactionHash}` as `0x${string}` : undefined,
  });

  const deployContract = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setTransactionHash('');
    setError('');

    console.group("deployContract");
    setIsLoading(true);
    try {
      const provider = await connector?.getProvider() as any;
      console.log({ provider });

      const tx = await provider.request({
        method: "eth_sendTransaction",
        params: [{
          from: address,
          data: CONTRACT_BYTECODE,
        }],
      });

      setTransactionHash(tx);
      receipt.refetch();
    } catch (error: any) {
      console.error(error?.message);
      console.error(error?.reason);
      console.error(error);
      setError(error?.message);
    }
    setIsLoading(false);
    console.groupEnd();
  };

  // Render
  return (
    <section className="pb-6 mb-6 border-zinc-700 border-b">
      <>
        <h2>Deploy Contract</h2>
        {isConnected
          ? <div>
            <form onSubmit={deployContract}>
              <div>
                <label>ByteCode</label>
                <pre><code>{CONTRACT_BYTECODE}</code></pre>
              </div>
              <div>
                <button disabled={isLoading} type="submit">Deploy</button>
              </div>
            </form>

            <div>
              <label>Transaction Hash Result</label>
              <pre><code>{transactionHash}{error}</code></pre>
              {transactionHash && (
                <p><a href={`${BLOCK_EXPLORER}/tx/${transactionHash}`} target="_blank" rel="noopener noreferrer">View Transaction</a></p>
              )}
            </div>

            <div>
              <label>Transaction Receipt</label>
              <pre><code>{receipt.status === 'pending' ? `Status: ${receipt.status}\n\nWaiting...` : ''}{receipt.status === 'error' ? `Status: ${receipt.status}\n\n${receipt?.failureReason?.message}` : ''}{receipt.status === 'success' ? `Status: ${receipt.status}\n\n${receipt?.data?.contractAddress}` : ''}</code></pre>
              {receipt?.data?.contractAddress && (
                <p><a href={`${BLOCK_EXPLORER}/address/${receipt?.data?.contractAddress}`} target="_blank" rel="noopener noreferrer">View Contract</a></p>
              )}
            </div>
          </div>
          : <div>
            <pre><code>Not Connected</code></pre>
          </div>
        }
      </>
    </section>
  );
};